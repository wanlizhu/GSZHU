cmake_minimum_required(VERSION 3.15.0)
project(dejavu-core)
include(GNUInstallDirs)
include(CheckCXXCompilerFlag)
include(CheckCXXSourceRuns)
include(CMakeParseArguments)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(DJV_BUILD_SHARED_LIBS ON)
set(DJV_USE_EIGEN ON CACHE BOOL "Use Eigen library as the linear algebra backend")

add_library(dejavu-core SHARED "dllmain.cpp")

find_package(Eigen3 CONFIG REQUIRED)
#find_package(assimp CONFIG REQUIRED)
find_package(Stb REQUIRED)
find_package(Vulkan REQUIRED)

target_include_directories(dejavu-core PUBLIC  "${CMAKE_CURRENT_SOURCE_DIR}")
target_include_directories(dejavu-core PRIVATE "${Stb_INCLUDE_DIR}")
target_compile_definitions(dejavu-core PRIVATE "UNICODE")
target_link_libraries(dejavu-core PUBLIC  Eigen3::Eigen)
#target_link_libraries(dejavu-core PRIVATE assimp::assimp)
target_link_libraries(dejavu-core PRIVATE  Vulkan::Vulkan)

configure_file("config.h.in" "config.h")

target_sources(dejavu-core PRIVATE "config.h")
target_sources(dejavu-core PRIVATE "utils/filesystem.h")
target_sources(dejavu-core PRIVATE "utils/logger.h")
target_sources(dejavu-core PRIVATE "utils/strings.h")
target_sources(dejavu-core PRIVATE "utils/bitmap.h")
target_sources(dejavu-core PRIVATE "utils/algebra.h")
target_sources(dejavu-core PRIVATE "utils/exceptions.h")
target_sources(dejavu-core PRIVATE "utils/preprocess.h")
target_sources(dejavu-core PRIVATE "core/window.h")
target_sources(dejavu-core PRIVATE "core/application.h")
target_sources(dejavu-core PRIVATE "device/device_interface.h")
target_sources(dejavu-core PRIVATE "renderer/renderer_interface.h")
target_sources(dejavu-core PRIVATE "scene/scene_interface.h")

target_sources(dejavu-core PRIVATE "utils/filesystem_$<IF:$<STREQUAL:${CMAKE_SYSTEM_NAME},Windows>,windows,unix>.cpp")
target_sources(dejavu-core PRIVATE "utils/logger.cpp")
target_sources(dejavu-core PRIVATE "utils/strings.cpp")
target_sources(dejavu-core PRIVATE "utils/bitmap.cpp")
target_sources(dejavu-core PRIVATE "utils/stb_image.cpp")
target_sources(dejavu-core PRIVATE "core/window.cpp")
target_sources(dejavu-core PRIVATE "core/application.cpp")
target_sources(dejavu-core PRIVATE "device/device_impl.cpp")
target_sources(dejavu-core PRIVATE "renderer/renderer_impl.cpp")
target_sources(dejavu-core PRIVATE "scene/scene_impl.cpp")

if (COMMAND djv_source_group)
    djv_source_group(dejavu-core ROOTS "${CMAKE_CURRENT_SOURCE_DIR}")    
endif()

if (COMMAND add_precompiled_header)
    add_precompiled_header(dejavu-core "stdafx.h" SOURCE_CXX "stdafx.cpp")
endif()