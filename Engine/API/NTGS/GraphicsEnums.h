#pragma once
#include <stdint.h>
#include "TextureFormatEnums.h"

namespace NTGS {
    enum VALUE_TYPE : uint8_t {
        VT_UNDEFINED = 0, 
        VT_INT8,         
        VT_INT16,        
        VT_INT32,       
        VT_UINT8,       
        VT_UINT16,     
        VT_UINT32,     
        VT_FLOAT16,  
        VT_FLOAT32, 
        VT_NUM_TYPES
    };
    
    enum BIND_FLAGS : uint32_t {
        BIND_NONE               = 0x0L, 
        BIND_VERTEX_BUFFER	    = 0x1L,
        BIND_INDEX_BUFFER	    = 0x2L, 
        BIND_UNIFORM_BUFFER	    = 0x4L, 
                                        
        BIND_SHADER_RESOURCE	= 0x8L, // This flag may not be combined with any other bind flag
                                        
        BIND_STREAM_OUTPUT	    = 0x10L,
        BIND_RENDER_TARGET	    = 0x20L,
        BIND_DEPTH_STENCIL	    = 0x40L,
        BIND_UNORDERED_ACCESS	= 0x80L,
        BIND_INDIRECT_DRAW_ARGS	= 0x100L
    };
    DEFINE_FLAG_ENUM_OPERATORS(BIND_FLAGS)
    
    enum USAGE : uint8_t {
        USAGE_STATIC = 0, 
        USAGE_DEFAULT,
        USAGE_DYNAMIC,
        USAGE_CPU_ACCESSIBLE
    };
    
    enum CPU_ACCESS_FLAGS : uint8_t {
        CPU_ACCESS_NONE  = 0x00, 
        CPU_ACCESS_READ  = 0x01, 
        CPU_ACCESS_WRITE = 0x02  
    };
    DEFINE_FLAG_ENUM_OPERATORS(CPU_ACCESS_FLAGS)
    
    enum MAP_TYPE : uint8_t {
        MAP_READ = 0x01,       
        MAP_WRITE = 0x02,
        MAP_READ_WRITE = 0x03
    };
    
    enum MAP_FLAGS : uint8_t {
        MAP_FLAG_NONE       = 0x000,
        MAP_FLAG_DO_NOT_WAIT = 0x001,
        MAP_FLAG_DISCARD = 0x002,
        MAP_FLAG_DO_NOT_SYNCHRONIZE = 0x004
    };
    DEFINE_FLAG_ENUM_OPERATORS(MAP_FLAGS)
    
    enum RESOURCE_DIMENSION : uint8_t {
        RESOURCE_DIM_UNDEFINED = 0, 
        RESOURCE_DIM_BUFFER,        
        RESOURCE_DIM_TEX_1D,        
        RESOURCE_DIM_TEX_1D_ARRAY,  
        RESOURCE_DIM_TEX_2D,        
        RESOURCE_DIM_TEX_2D_ARRAY,  
        RESOURCE_DIM_TEX_3D,        
        RESOURCE_DIM_TEX_CUBE,      
        RESOURCE_DIM_TEX_CUBE_ARRAY,
        RESOURCE_DIM_NUM_DIMENSIONS 
    };
    
    enum TEXTURE_VIEW_TYPE : uint8_t {
        TEXTURE_VIEW_UNDEFINED = 0,     
        TEXTURE_VIEW_SHADER_RESOURCE,
        TEXTURE_VIEW_RENDER_TARGET,     
        TEXTURE_VIEW_DEPTH_STENCIL,     
        TEXTURE_VIEW_UNORDERED_ACCESS,  
        TEXTURE_VIEW_NUM_VIEWS          
    };

    enum FILTER_TYPE : uint8_t {
        FILTER_TYPE_UNKNOWN  = 0,           
        FILTER_TYPE_POINT,                  
        FILTER_TYPE_LINEAR,                 
        FILTER_TYPE_ANISOTROPIC,            
        FILTER_TYPE_COMPARISON_POINT,       
        FILTER_TYPE_COMPARISON_LINEAR,      
        FILTER_TYPE_COMPARISON_ANISOTROPIC, 
        FILTER_TYPE_MINIMUM_POINT,          
        FILTER_TYPE_MINIMUM_LINEAR,         
        FILTER_TYPE_MINIMUM_ANISOTROPIC,    
        FILTER_TYPE_MAXIMUM_POINT,          
        FILTER_TYPE_MAXIMUM_LINEAR,         
        FILTER_TYPE_MAXIMUM_ANISOTROPIC,    
        FILTER_TYPE_NUM_FILTERS             
    };
    
    enum TEXTURE_ADDRESS_MODE : uint8_t {
        TEXTURE_ADDRESS_UNKNOWN = 0,
        TEXTURE_ADDRESS_WRAP	= 1,
        TEXTURE_ADDRESS_MIRROR	= 2,
        TEXTURE_ADDRESS_CLAMP	= 3,
        TEXTURE_ADDRESS_BORDER	= 4,
        TEXTURE_ADDRESS_MIRROR_ONCE	= 5,
        TEXTURE_ADDRESS_NUM_MODES
    };

    enum COMPARISON_FUNCTION : uint8_t {
        COMPARISON_FUNC_UNKNOWN = 0,
        COMPARISON_FUNC_NEVER,
        COMPARISON_FUNC_LESS,
        COMPARISON_FUNC_EQUAL,
        COMPARISON_FUNC_LESS_EQUAL,
        COMPARISON_FUNC_GREATER,
        COMPARISON_FUNC_NOT_EQUAL,
        COMPARISON_FUNC_GREATER_EQUAL,
        COMPARISON_FUNC_ALWAYS,
        COMPARISON_FUNC_NUM_FUNCTIONS
    };

    enum MISC_TEXTURE_FLAGS : uint8_t {
        MISC_TEXTURE_FLAG_NONE          = 0x00,
        MISC_TEXTURE_FLAG_GENERATE_MIPS = 0x01
    };
    DEFINE_FLAG_ENUM_OPERATORS(MISC_TEXTURE_FLAGS)
    
    enum PRIMITIVE_TOPOLOGY : uint8_t {
        PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
        PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
        PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP,
        PRIMITIVE_TOPOLOGY_POINT_LIST,
        PRIMITIVE_TOPOLOGY_LINE_LIST,
        PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
        PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
        PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
        PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
        PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
        PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
        PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
        PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
        PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,

        PRIMITIVE_TOPOLOGY_NUM_TOPOLOGIES
    };
    
    enum COMPONENT_TYPE : uint8_t {
        COMPONENT_TYPE_UNDEFINED,
        COMPONENT_TYPE_FLOAT,
        COMPONENT_TYPE_SNORM,
        COMPONENT_TYPE_UNORM,
        COMPONENT_TYPE_UNORM_SRGB,
        COMPONENT_TYPE_SINT,
        COMPONENT_TYPE_UINT,
        COMPONENT_TYPE_DEPTH,
        COMPONENT_TYPE_DEPTH_STENCIL,
        COMPONENT_TYPE_COMPOUND,
        
        COMPONENT_TYPE_COMPRESSED,
    };

    enum RESOURCE_STATE : uint32_t {
        RESOURCE_STATE_UNKNOWN              = 0x0000,
        RESOURCE_STATE_UNDEFINED            = 0x0001,
        RESOURCE_STATE_VERTEX_BUFFER        = 0x0002,
        RESOURCE_STATE_CONSTANT_BUFFER      = 0x0004,
        RESOURCE_STATE_INDEX_BUFFER         = 0x0008,
        RESOURCE_STATE_RENDER_TARGET        = 0x0010,
        RESOURCE_STATE_UNORDERED_ACCESS     = 0x0020,
        RESOURCE_STATE_DEPTH_WRITE          = 0x0040,
        RESOURCE_STATE_DEPTH_READ           = 0x0080,
        RESOURCE_STATE_SHADER_RESOURCE      = 0x0100,
        RESOURCE_STATE_STREAM_OUT           = 0x0200,
        RESOURCE_STATE_INDIRECT_ARGUMENT    = 0x0400,
        RESOURCE_STATE_COPY_DEST            = 0x0800,
        RESOURCE_STATE_COPY_SOURCE          = 0x1000,
        RESOURCE_STATE_RESOLVE_DEST         = 0x2000,
        RESOURCE_STATE_RESOLVE_SOURCE       = 0x4000,
        RESOURCE_STATE_PRESENT              = 0x8000,

        RESOURCE_STATE_MAX_BIT              = 0x8000,
        RESOURCE_STATE_GENERIC_READ         = RESOURCE_STATE_VERTEX_BUFFER     |
                                              RESOURCE_STATE_CONSTANT_BUFFER   |
                                              RESOURCE_STATE_INDEX_BUFFER      |
                                              RESOURCE_STATE_SHADER_RESOURCE   |
                                              RESOURCE_STATE_INDIRECT_ARGUMENT |
                                              RESOURCE_STATE_COPY_SOURCE
    };

    enum STATE_TRANSITION_TYPE : uint8_t {
        STATE_TRANSITION_TYPE_IMMEDIATE = 0,
        STATE_TRANSITION_TYPE_BEGIN,
        STATE_TRANSITION_TYPE_END
    };
    
    

}