# cm_use_eigen3()
# Eigen3 is a header-only library
macro(cm_use_eigen3)
    if (VCPKG_TOOLCHAIN)
        find_package(Eigen3 CONFIG REQUIRED)
    else()
        add_library(Eigen3::Eigen INTERFACE IMPORTED GLOBAL)
        target_include_directories(Eigen3::Eigen INTERFACE "${PACKAGES_DIR}/include")
    endif()

    target_link_libraries(${__CurrentTargetName__} PRIVATE Eigen3::Eigen)
endmacro()

# cm_use_nlohmann_json()
# nlohmann_json is a header-only library
macro(cm_use_nlohmann_json)
    if (VCPKG_TOOLCHAIN)
        find_package(nlohmann_json CONFIG REQUIRED)
    else()
        add_library(nlohmann_json::nlohmann_json INTERFACE IMPORTED GLOBAL)
        target_include_directories(nlohmann_json::nlohmann_json INTERFACE "${PACKAGES_DIR}/include")
    endif()

    target_link_libraries(${__CurrentTargetName__} PRIVATE nlohmann_json::nlohmann_json)
endmacro()

# cm_use_tinygltf()
macro(cm_use_tinygltf)
    # there is no CMake targets provided by VCPKG_TOOLCHAIN
    add_library(tinygltf::tinygltf INTERFACE IMPORTED GLOBAL)
    target_include_directories(tinygltf::tinygltf INTERFACE "${PACKAGES_DIR}/include")
    foreach(file "stb_image.h" "nlohmann/json.hpp")
        if (NOT EXISTS "${PACKAGES_DIR}/include/${file}")
            message(FATAL_ERROR "header file dependency(${file}) does not exist")
        endif()
    endforeach()

    target_link_libraries(${__CurrentTargetName__} PRIVATE tinygltf::tinygltf)
endmacro()

# cm_use_glfw3()
macro(cm_use_glfw3)
    if (VCPKG_TOOLCHAIN)
        find_package(glfw3 CONFIG REQUIRED)
    else()
        add_library(glfw SHARED IMPORTED GLOBAL)
        target_include_directories(glfw INTERFACE                       "${PACKAGES_DIR}/include")
        set_target_properties(glfw PROPERTIES IMPORTED_LOCATION_DEBUG   "${PACKAGES_DIR}/debug/bin/glfw3.dll")
        set_target_properties(glfw PROPERTIES IMPORTED_IMPLIB_DEBUG     "${PACKAGES_DIR}/debug/lib/glfw3.lib")
        set_target_properties(glfw PROPERTIES IMPORTED_LOCATION_RELEASE "${PACKAGES_DIR}/bin/glfw3.dll")
        set_target_properties(glfw PROPERTIES IMPORTED_IMPLIB_RELEASE   "${PACKAGES_DIR}/lib/glfw3.lib")
    endif()

    target_link_libraries(${__CurrentTargetName__} PRIVATE glfw)
endmacro()

# cm_use_glfw3_static()
macro(cm_use_glfw3_static)
    if (VCPKG_TOOLCHAIN)
        find_package(glfw3 CONFIG REQUIRED)
    else()
        add_library(glfw STATIC IMPORTED GLOBAL)
        target_include_directories(glfw INTERFACE                       "${PACKAGES_DIR}/include")
        set_target_properties(glfw PROPERTIES IMPORTED_LOCATION_DEBUG   "${PACKAGES_DIR}/debug/lib/glfw3d.lib")
        set_target_properties(glfw PROPERTIES IMPORTED_LOCATION_RELEASE "${PACKAGES_DIR}/lib/glfw3.lib")
    endif()

    target_link_libraries(${__CurrentTargetName__} PRIVATE glfw)
endmacro()

# cm_use_imgui()
macro(cm_use_imgui)
    if (VCPKG_TOOLCHAIN)
        find_package(imgui CONFIG REQUIRED)
    else()
        add_library(imgui::imgui SHARED IMPORTED GLOBAL)
        target_include_directories(imgui::imgui INTERFACE                       "${PACKAGES_DIR}/include")
        set_target_properties(imgui::imgui PROPERTIES IMPORTED_LOCATION_DEBUG   "${PACKAGES_DIR}/debug/bin/imguid.dll")
        set_target_properties(imgui::imgui PROPERTIES IMPORTED_IMPLIB_DEBUG     "${PACKAGES_DIR}/debug/lib/imguid.lib")
        set_target_properties(imgui::imgui PROPERTIES IMPORTED_LOCATION_RELEASE "${PACKAGES_DIR}/bin/imgui.dll")
        set_target_properties(imgui::imgui PROPERTIES IMPORTED_IMPLIB_RELEASE   "${PACKAGES_DIR}/lib/imgui.lib")
    endif()

    target_link_libraries(${__CurrentTargetName__} PRIVATE imgui::imgui)
endmacro()

# cm_use_imgui_static()
macro(cm_use_imgui_static)
    if (VCPKG_TOOLCHAIN)
        find_package(imgui CONFIG REQUIRED)
    else()
        add_library(imgui::imgui STATIC IMPORTED GLOBAL)
        target_include_directories(imgui::imgui INTERFACE                       "${PACKAGES_DIR}/include")
        set_target_properties(imgui::imgui PROPERTIES IMPORTED_LOCATION_DEBUG   "${PACKAGES_DIR}/debug/lib/imgui.lib")
        set_target_properties(imgui::imgui PROPERTIES IMPORTED_LOCATION_RELEASE "${PACKAGES_DIR}/lib/imgui.lib")
    endif()

    target_link_libraries(${__CurrentTargetName__} PRIVATE imgui::imgui)
endmacro()

# cm_use_tinyobjloader()
macro(cm_use_tinyobjloader)
    if (VCPKG_TOOLCHAIN)
        find_package(tinyobjloader CONFIG REQUIRED)
    else()
        add_library(tinyobjloader::tinyobjloader SHARED IMPORTED GLOBAL)
        target_include_directories(tinyobjloader::tinyobjloader INTERFACE                       "${PACKAGES_DIR}/include")
        set_target_properties(tinyobjloader::tinyobjloader PROPERTIES IMPORTED_LOCATION_DEBUG   "${PACKAGES_DIR}/debug/bin/tinyobjloader.dll")
        set_target_properties(tinyobjloader::tinyobjloader PROPERTIES IMPORTED_IMPLIB_DEBUG     "${PACKAGES_DIR}/debug/lib/tinyobjloader.lib")
        set_target_properties(tinyobjloader::tinyobjloader PROPERTIES IMPORTED_LOCATION_RELEASE "${PACKAGES_DIR}/bin/tinyobjloader.dll")
        set_target_properties(tinyobjloader::tinyobjloader PROPERTIES IMPORTED_IMPLIB_RELEASE   "${PACKAGES_DIR}/lib/tinyobjloader.lib")
    endif()

    target_link_libraries(${__CurrentTargetName__} PRIVATE tinyobjloader::tinyobjloader)
endmacro()

# cm_use_tinyobjloader_static()
macro(cm_use_tinyobjloader_static)
    if (VCPKG_TOOLCHAIN)
        find_package(tinyobjloader CONFIG REQUIRED)
    else()
        add_library(tinyobjloader::tinyobjloader STATIC IMPORTED GLOBAL)
        target_include_directories(tinyobjloader::tinyobjloader INTERFACE                       "${PACKAGES_DIR}/include")
        set_target_properties(tinyobjloader::tinyobjloader PROPERTIES IMPORTED_LOCATION_DEBUG   "${PACKAGES_DIR}/debug/lib/tinyobjloader.lib")
        set_target_properties(tinyobjloader::tinyobjloader PROPERTIES IMPORTED_LOCATION_RELEASE "${PACKAGES_DIR}/lib/tinyobjloader.lib")
    endif()

    target_link_libraries(${__CurrentTargetName__} PRIVATE tinyobjloader::tinyobjloader)
endmacro()
